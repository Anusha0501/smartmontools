#!/bin/sh
#
# Create svnversion.h file or get package version
#
# Home page of code is: https://www.smartmontools.org
#
# Copyright (C) 2024-25 Christian Franke
#
# SPDX-License-Identifier: GPL-2.0-or-later
#

set -e
myname=$0

usage()
{
  cat <<EOF
Usage: $myname -n
       $myname -s > version.sh
       $myname -i < version.sh > version.h

  -n          Print version string suitable for filenames
  -s          Create shell script which sets version information
  -i          Create include file from shell script
EOF
  exit 1
}

error()
{
  echo "$myname: $*" >&2
  exit 1
}

i_opt=false; n_opt=false; s_opt=false
while :; do case $1 in
  -i) i_opt=true ;;
  -n) n_opt=true ;;
  -s) s_opt=true ;;
  -*) usage ;;
  *) break ;;
esac; shift; done
case "$#:$i_opt$n_opt$s_opt" in
  *true*true*) usage ;; 0:*true*) ;; *) usage ;;
esac

if $i_opt; then
  # version.sh -> version.h
  echo "// version.h.  Generated by ${myname##*/} from version.sh."
  sed -e 's/#/\/\//' -e 's/=/ /' -e 's/'\''/"/g' \
      -e 's/^unset /#undef /' \
      -e 's/^SMART/#define SMART/'
  exit 0
fi

srcdir=${myname%/*}
test "$srcdir" != "$myname" || error 'unknown $srcdir'
top_srcdir="$srcdir/.."

# Get PACKAGE_VERSION from configure.ac
ver=$(sed -n 's|^AC_INIT[^,]*, *\[\([0-9.]*\)\] *,.*$|\1|p' "$top_srcdir/configure.ac") || exit 1
test -n "$ver" || error "$top_srcdir/configure.ac: package version not found"

# Missing release date indicates pre-release
pre=
x=$(sed -n 's|^smartmontools_release_date=\(.*\)$|\1|p' "$top_srcdir/configure.ac") || exit 1
case $x in
  20*) ;;
  \ \#*) pre="pre-" ;;
  *) error "$top_srcdir/configure.ac: unable to detect pre-release state" ;;
esac

# Check whether this is a git checkout
is_git_co=true
test -n "$(cd "$top_srcdir" && git ls-files README.md 2>/dev/null)" || is_git_co=false

# Check for the copy of 'version.sh' generated by 'make distdir'
dist_version_sh="$srcdir/dist-version.sh"
if [ -f "$dist_version_sh" ]; then
  ! $is_git_co || error "$dist_version_sh: must not exist in a git checkout"

  x=$(
    sed -e '/^#/d' -e 's/ *#.*$//'\
        -e '/^unset SMARTMONTOOLS_GIT_[A-Z_]*$/d' \
        -e '/^SMARTMONTOOLS_GIT_[A-Z_]*='"'[^'][^']*'"'$/d' \
        -e '/^SMARTMONTOOLS_GIT_[A-Z_]*=[0-9][0-9]*$/d' "$dist_version_sh"
  ) || exit 1
  test -z "${x:+t}" || error "$dist_version_sh: syntax error"

  if $n_opt; then
    unset SMARTMONTOOLS_GIT_VER_FNAME
    # shellcheck disable=SC1090
    . "$dist_version_sh" || exit 1
    test -n "$SMARTMONTOOLS_GIT_VER_FNAME" \
    || error "$dist_version_sh: missing SMARTMONTOOLS_GIT_VER_FNAME"
    echo "$SMARTMONTOOLS_GIT_VER_FNAME"
  else
    cat "$dist_version_sh"
  fi
  exit 0
fi

rev=; rev_date=; rev_time=; pre_revs=
ver_desc="$ver-unknown"
ver_fname=$ver_desc
ver_win="$ver.0.999"
origin="(git log not available)"

if $is_git_co; then
  # Get hash, date and time of current revision
  x=$(cd "$top_srcdir" && TZ='' LC_ALL=C git log -1 --date=iso-local --format='format:%h %cd' 2>/dev/null) \
  || exit 1
  rev=${x%% *}; x=${x#* }
  rev_date=${x%% *}; x=${x#* }
  rev_time=${x%% *}

  # Check for modifications
  x="$(cd "$top_srcdir" && git status -s -uno)" || exit 1
  modified=${x:+-modified}

  if [ -n "$pre" ]; then
    # Determine git revision of previous PACKAGE_VERSION
    # Note: this assumes that future versions will be tagged "smartmontools-X.Y"
    major=${ver%%.*}; minor=${ver##*.}
    test "$major.$minor" = "$ver" || error "$ver: invalid package version"
    test "$major" -ge 8 || error "$ver: package versions below 8.0 are not supported"
    if [ "$minor" -gt 0 ]; then
      prev_rev="smartmontools-$major.$((minor - 1))"
    elif [ "$major" -gt 8 ]; then
      pattern="smartmontools-$((major - 1)).*";
      prev_rev=$(git tag -l --sort=-authordate --no-column "$pattern" | head -1) || exit 1
      test -n "$prev_rev" || error "$pattern: no matching revision found"
    else
      prev_rev=943adaed # r5714 - RELEASE_7_5 svn/trunk commit
    fi

    # Get number of revisions since previous PACKAGE_VERSION
    pre_revs=$(cd "$top_srcdir" && git rev-list --count "$prev_rev..HEAD" 2>/dev/null) \
    || error "$prev_rev: revision not found"
    test "$pre_revs" -gt 0 || error "$prev_rev: is not a previous revision"
    test "$pre_revs" -lt 5600 || error "$prev_rev: is on an unrelated branch"

    # "pre-X.Y-NNN[-modified]"
    ver_desc="pre-$ver-$(printf '%03d' "$pre_revs")$modified"
    # "X.Y-NNN-gHASH[-modified]"
    ver_fname="$ver-$(printf '%03d' "$pre_revs")-g$rev$modified"
    # "X.Y.0.N[+500]"
    if [ -z "$modified" ]; then
      ver_win="$ver.0.$pre_revs"
    else
      ver_win="$ver.0.$((pre_revs + 500))"
    fi

  else
    # Release
    ver_desc="$ver$modified"
    ver_fname=$ver_desc
    if [ -z "$modified" ]; then
      ver_win="$ver.0.1000"
    else
      ver_win="$ver.0.1500"
    fi
  fi
  origin="and git log"

else
  echo "$myname: Warning: version information is incomplete" >&2
fi

if $n_opt; then
  echo "$ver_fname"

else
  varout() # NAME "'VALUE'" "COMMENT"
  {
    case $2 in
      ""|"''") echo "unset $1 # $3" ;;
      *)       echo "$1=$2 # $3" ;;
    esac
  }

  echo "# version.sh.  Generated by ${myname##*/} from configure.ac $origin."
  varout SMARTMONTOOLS_GIT_REV "'$rev'" "git revision"
  varout SMARTMONTOOLS_GIT_REV_DATE "'$rev_date'" "commit date"
  varout SMARTMONTOOLS_GIT_REV_TIME "'$rev_time'" "commit time (UTC)"
  varout SMARTMONTOOLS_GIT_PRE_REVS "$pre_revs" "commits since previous release"
  varout SMARTMONTOOLS_GIT_VER_DESC "'$ver_desc'" "version description"
  varout SMARTMONTOOLS_GIT_VER_FNAME "'$ver_fname'"  "version string for filenames"
  varout SMARTMONTOOLS_GIT_VER_WIN "'$ver_win'" "version for Windows VERSIONINFO"
fi
